#!/usr/bin/env bash
set -euo pipefail

echo "ðŸ”§ Enabling NTP"
timedatectl set-ntp true

# VARIABLES
DISK="/dev/nvme0n1"
MNT="/mnt"

# === 1. CREATE PARTITIONS ===
echo "=== 1. Creating partitions ==="
sgdisk -n1:0:+1981M -t1:EF00 -c1:"BOOT" "$DISK"
sgdisk -n2:0:+32G -t2:8300 -c2:"ROOT" "$DISK"
sgdisk -n3:0:+72G -t3:8200 -c3:"SWAP" "$DISK"
sgdisk -n4:0:+12G -t3:8300 -c4:"VARCACHE" "$DISK"
sgdisk -n5:0:+8G -t4:8300 -c5:"VARLOG" "$DISK"
sgdisk -n6:0:+8G -t5:8300 -c6:"VARLIB" "$DISK"
sgdisk -n7:0:+22G -t6:8300 -c7:"HOME" "$DISK"
sgdisk -n8:0:+24G -t7:8300 -c8:"BUILDS" "$DISK"
sgdisk -n9:0:0 -t8:8300 -c9:"DATA" "$DISK"
sgdisk -p "$DISK"


# 2. FORMAT PARTITIONS
echo "2. Formatting partitions"
mkfs.fat -F32 "${DISK}p1"
F2FS_OPTS="-f -O extra_attr,inode_checksum,sb_checksum,compression"
mkfs.f2fs $F2FS_OPTS -l ROOT "${DISK}p2"
mkswap "${DISK}p3"
mkfs.f2fs $F2FS_OPTS -l VARCACHE "${DISK}p4"
mkfs.f2fs $F2FS_OPTS -l VARLOG "${DISK}p5"
mkfs.f2fs $F2FS_OPTS -l VARLIB "${DISK}p6"
mkfs.f2fs $F2FS_OPTS -l HOME "${DISK}p7"
mkfs.f2fs $F2FS_OPTS -l BUILDS "${DISK}p8"
mkfs.xfs -f -L DATA "${DISK}p9"


# 3. MOUNT PARTITIONS
echo "3. Mounting partitions"
mount -t f2fs -o compress_algorithm=lz4,compress_chksum,noatime "${DISK}p2" "$MNT"
swapon "${DISK}p3"
mkdir -p $MNT/{boot,var/cache,var/log,var/lib,home,builds,data}
mount -t vfat -o noatime "${DISK}p1" "$MNT/boot"
mount -t f2fs -o compress_algorithm=lz4,compress_chksum,noatime "${DISK}p4" "$MNT/var/cache"
mount -t f2fs -o compress_algorithm=lz4,compress_chksum,noatime "${DISK}p5" "$MNT/var/log"
mount -t f2fs -o compress_algorithm=lz4,compress_chksum,noatime "${DISK}p6" "$MNT/var/lib"
mount -t f2fs -o compress_algorithm=lz4,compress_chksum,noatime "${DISK}p7" "$MNT/home"
mount -t f2fs -o compress_algorithm=lz4,compress_chksum,noatime "${DISK}p8" "$MNT/builds"
mount -t xfs -o noatime,logbufs=8,logbsize=256k,allocsize=2M "${DISK}p9" "$MNT/data"


# 4. INSTALL BASE SYSTEM + ESSENTIAL PACKAGES
echo "=== 4. Installing base system + essential packages ==="
pacstrap $MNT \
  base base-devel \
  linux-lts \
  linux-firmware \
  sudo nano \
  efibootmgr intel-ucode \
  ly \
  gnome-shell gnome-desktop-4 gnome-session gnome-settings-daemon mutter gnome-control-center gnome-console gnome-system-monitor gnome-text-editor \
  networkmanager \
  gnome-keyring nautilus \
  pipewire wireplumber pipewire-pulse pipewire-alsa pipewire-jack \
  xdg-desktop-portal xdg-desktop-portal-gnome xdg-utils \
  xorg-xwayland \
  ccache mold ninja

# 5. GENERATE FSTAB
echo "=== 5. Generating fstab ==="
genfstab -U $MNT >> $MNT/etc/fstab
cat >> $MNT/etc/fstab <<EOF
tmpfs   /tmp    tmpfs   size=100%,mode=1777,noatime 0 0
EOF

# 6. CHROOT AND SYSTEM CONFIGURATION
echo "=== 6. Chrooting into new system ==="
arch-chroot $MNT /bin/bash <<'EOF_CHROOT'

# 6.1 Timezone
ln -sf /usr/share/zoneinfo/Europe/Kiev /etc/localtime
hwclock --systohc

# 6.2 Locale
sed -i '/^#en_US.UTF-8 UTF-8/s/^#//' /etc/locale.gen
locale-gen
echo LANG=en_US.UTF-8 > /etc/locale.conf

# 6.3 Hostname
echo "cerebro" > /etc/hostname

# 6.4 Create user
echo "j:123" | chpasswd
sed -i '/^# %wheel ALL=(ALL:ALL) ALL/s/^# //' /etc/sudoers

# 7.1 Configure makepkg.conf (RAM builds, results in /builds)
mkdir -p /var/cache/ccache
chmod 777 /var/cache/ccache
cat > /etc/makepkg.conf <<'EOF_MAKEPKG'
$(curl -s https://raw.githubusercontent.com/cerebro-tech/Cerebro/refs/heads/main/makepkg.conf)
EOF_MAKEPKG

# 7.2 Configure pacman.conf
cat > /etc/pacman.conf <<EOF_PACMAN
$(curl -s https://raw.githubusercontent.com/cerebro-tech/Cerebro/refs/heads/main/makepkg.conf)
EOF_PACMAN

# 7.3 Config mkinitcpio.conf, Initramfs
sed -i 's/^HOOKS=.*/HOOKS=(base udev autodetect modconf block filesystems keyboard resume fsck)/' /etc/mkinitcpio.conf
mkinitcpio -P

# 8 Create EFISTUB Bootloader
efibootmgr -c -d ${DISK} -p 1 \ -L "Cerebro LTS IntelGPU" \
-l '\vmlinuz-linux-lts' \
-u "root=${DISK}p2 rw rootfstype=f2fs initrd=\\initramfs-linux-lts.img resume=${DISK}p3 loglevel=3 quiet" \
--verbose

# 9 Enable services
systemctl enable NetworkManager
systemctl enable ly

EOF_CHROOT

echo "Cerebro installation completed successfully! Reboot."
